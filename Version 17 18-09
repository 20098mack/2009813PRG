#import required library
from tkinter import *
from tkinter import messagebox
import random
import pyglet
import os

#pyglet.font.add_file('Merriweather-Italic.ttf')
#pyglet.font.add_file("Pacifico.ttf")

# Initialize a global score variable and default messages for feedback.
global SCORE
SCORE = 0

# Different messages for feedback based on the player's score.
MSGD = ""
MSG1 = "Hard luck, better luck next time"
MSG2 = "Half way there! just a little more study"
MSG3 = "So close, maybe next time."
MSG4 = "AMAZINGðŸŽ‰"

#Sets constants for when each message is displated
PER1 = 20
PER2 = 50
PER3 = 70

# List of questions in the format: [id, correct answer index, question, option1, option2, option3, option4]
# The list includes both multiple-choice and true/false questions.
QUESTIONS = [
    [1,1,"How many active volcanoes are on land","1500","10000","140000","6400"],
    [2,2,"You can see arteries through the skin", "True", "False"],
    [3,2,"A tsunami is just a really big wave", "True", "False"],
    [4,4, "Which cycle the powers the ocean currents, weather and tectonic plate movement","Gravity (from the sun)", "conduction current", "condition cycle", "convection currents"],
    [5,3,"Which circuit pumps blood from the heart, to the lungs, and back to the heart","systemic circuit", "cardiac circuit", "pulmonary circuit", "vascular circuit"],
    [6,2,"What is the main cause of tsunamis", "Volcanic eruption", "Earthquake under the sea", "Hurricane", "Gravity (from sun and moon)"],
    [7,3,"Which natural disaster is often predicted by meteorologists using radar and satellite imagery", "Earthquake", "Volcano", "Tornado", "Flood"] ,
    [8,3,"Which chamber of the heart has the thickest wall", "Left atrium", "Right atrium", "Left ventricle", "right ventricle"],
    [9,3,"What is the primary difference between a hurricane and a typhoon", "Their wind speed", "The temperature of the water they form over", "Their location", 
     "The amount of rainfall they produce"],
    [10,4,"Which of the following can trigger a landslide", "Heavy rainfall", "Earthquake", "Volcanic eruption", "All of the above"],
    [11,3,"Which of the following is untrue about the heart's functions", "Keeps blood flowing in one direction", "Circulates blood based on the needs of the body",
     "Mixes oxygen-poor and oxygen-rich blood", "Creates blood pressure"],
    [12,3,"Which of the following is a form of potential energy?", "Kinetic energy", "Thermal energy", "Chemical energy", "Light energy"],
    [13,1,"True or False: Energy cannot be created or destroyed, only transferred or transformed.", "True", "False"],
    [14,3,"Which of the following best describes kinetic energy?", "Energy stored in chemical bonds", "Energy due to an object's position", "Energy of an object in motion", "Energy transferred as heat"],
    [15,2,"What type of energy transformation occurs when a battery powers a flashlight?", "Electrical energy to chemical energy", "Chemical energy to light energy", "Light energy to thermal energy", "Thermal energy to kinetic energy"],
    [16,1,"True or False: The higher an object is above the ground, the more gravitational potential energy it has.", "True", "False"],
    [17,2,"Which type of energy is primarily involved in photosynthesis?", "Thermal energy", "Light energy", "Nuclear energy", "Sound energy"],
    [18,3,"What is the main form of energy conversion in a hydroelectric power plant?", "Electrical energy to kinetic energy", "Kinetic energy to potential energy", "Potential energy to electrical energy", "Thermal energy to electrical energy"],
    [19,1,"True or False: A light bulb converts electrical energy into both light energy and thermal energy.", "True", "False"],
    [20,2,"Which of the following is an example of energy transfer by conduction?", "Heat from the sun warming your skin", "A spoon getting hot from sitting in a pot of boiling water", "A microwave heating food", "Sound traveling through air"]
]



# Shuffle the order of the questions to randomize the quiz.
random.shuffle(QUESTIONS)

# The MAIN function is responsible for displaying the initial screen of the quiz.
# It creates the main window, which contains an introduction to the quiz and a button to start
def MAIN(question_win):
    main=Tk()

    # Sets the size and position of the window, disables resizing, and sets the background color.
    main.geometry("%dx%d+%d+%d" % (570, 600, 675, 249))
    #main.overrideredirect(True)
    main.resizable(False,False)
    main.configure(bg="#e69138")
    main.config(cursor="heart")
    
    # Adds a label to display the quiz title.
    header1 = Label(main, text="Science Quiz", bg="#ffe599", padx=67.3076923, font=("Merriweather", 20))
    header1.place(x=135 ,y=50)

    # Adds a label with an introduction to the quiz rules and structu
    introduction = Label(main,bg="#ffe599",font=("Merriweather", 27), text=
     "This quiz is about \n science. There are ten \n questions inlcuding \n multi choice and \n true/false questions.\n You will have three \n opurtunities to skip \n questions if you wish.")
    introduction.place(x=95.5,y=138)

    # Adds a button to start the quiz.
    BEGIN = Button(main, text="Begin", bg="#660000",fg="white", command= lambda:START(main, question_win), font=("Merriweather", 20), padx=112.849426)
    BEGIN.place(x=126.5,y=521)

    #initialises main loop for tkinter
    main.mainloop()

# START function is triggered when the user clicks the "Begin" button.
# It initializes the first question, destroys the intro window, and passes control to the QUESTION function.
def START(main, question_win):
    main.destroy()
    global qlist
    LCV = 0     # Loop Control Variable to track current question number.
    qlist = QUESTIONS[LCV]
    print(qlist)
    print(QUESTIONS)
    print(QUESTIONS[0])
    SCORE
    LCV = LCV + 1
    QUESTION(question_win, LCV, SCORE, SKIPS)

# Q_LOOP function is responsible for transitioning between questions.
# If all questions are answered, it calls the RESULTS function; otherwise, it moves to the next question.
def Q_LOOP(question_win, LCV, SCORE, SKIPS):
    if LCV == 10:       # End the quiz after 10 questions.
        question_win.destroy()
        RESULTS(SCORE, SKIPS)
    else:
        print(SCORE) 
        global qlist
        
        qlist = QUESTIONS[LCV]
        question_win.destroy()
        LCV = LCV + 1
        QUESTION(question_win, LCV, SCORE, SKIPS)
        
    
    
#QUESTION function displays each question and provides the interface for the user to answer.
# It sets up the question window, displays the question and answer options, and includes submit and skip buttons.
def QUESTION(question_win, LCV, SCORE, SKIPS):
    #global question_win
    #question_win.destroy()
    
    #creates question window using tkinter and a sets it size and position using .geometry
    #conifugures window to set colour
    question_win = Tk()
    question_win.geometry("%dx%d+%d+%d" % (570, 785, 675, 127.5))
    #question_win.overrideredirect(True)
    question_win.config(bg="#e69138")
    question_win.config(cursor="arrow")

    #sets answer to be a tkinter varaible
    STRVAR = StringVar()
    ANSWER = StringVar()
    ANSWER.set("Answer Selector")   # Default answer option.

    # Create answer options depending on whether it's a true/false or multiple-choice question.
    if len(qlist) == 5:
        OPTIONS = [(qlist[3]), (qlist[4])]
    else:
        OPTIONS = [(qlist[3]), (qlist[4]), (qlist[5]), (qlist[6])]

    #Creates all the widgets in window using Labels, optionmenu, and buttons
    header2 = Label(question_win, text="Question "+str(LCV), bg="#ffe599", padx=85.1962865, font=("Merriweather", 20))
    header2.place(x=135 ,y=30)
    questionbox = Canvas(question_win, bg="#ffe599", height=333, width=422)
    questionbox.place(y=86,x=74)
    QHEADER = Label(questionbox, text=str(qlist[2]), font=("Merriweather, 20"), wraplength=422, bg="#ffe599")
    QHEADER.place(relx=0.5, rely=0.5, anchor=CENTER)
    drop = OptionMenu(question_win, ANSWER, *OPTIONS)
    drop.config(width=27, font="Merriweather, 19", highlightthickness=4, bg="#f1c232", highlightcolor="#f1c232")
    drop["menu"].config(bg="#f1c232",font="Merriweather, 19")
    drop.place(x=74,y=450)
    dropbutton = Button(question_win, text="submit", command= lambda:SUBMIT(ANSWER, SCORE, question_win, LCV, SKIPS), bg="#660000",fg="white", font=("merriweather", 20), padx=107.6)
    dropbutton.place(x=126.5,y=531)
    skipbutton = Button(question_win, text="skip", command= lambda:SKIP(SCORE, question_win, LCV, ANSWER, SKIPS), bg="#660000",fg="white", font=("merriweather", 20), padx=122.6)
    skipbutton.place(x=126.5,y=600)

# SKIP function handles the logic when a user skips a question.
# It allows up to 3 skips and writes the skipped question to a results file.
def SKIP(SCORE, question_win, LCV, ANSWER, SKIPS):
    #checks if number of skips is equal to three and if it is, error message apears
    if SKIPS == 3:
        messagebox.showerror('Python Error', 'You have already skipped 3 times, answer the rest of the questions.')
    else:
        #if skips doesnt equal three next question goes
        SKIPS = SKIPS + 1
        Q_LOOP(question_win, LCV, SCORE, SKIPS)
        with open("QUIZ_RESULTS.txt", "a") as file:
            # Writes the the cards details into file, new info on each line, eahc card as blank line in between
            file.write("Question=" + str(QUESTIONS[LCV][2]) + "/10" + "\n")
            file.write("Question Skipped" + "\n\n")

# SUBMIT function handles the answer submission and scoring.
# It checks if the selected answer matches the correct one and writes the result to a file.
def SUBMIT(ANSWER, SCORE, question_win, LCV, SKIPS):
    CHECKVALUE = (int(qlist[1]))+2  # Calculate the index of the correct answer.
    CORRECT_ANS = qlist[CHECKVALUE]
    if ANSWER.get() == "Answer Selector":
        messagebox.showerror('Python Error', 'You must select an answer to submit, \nor skip the question if you have skips remaining')
    else:
        if ANSWER.get() == CORRECT_ANS: #checks if answer is correct
            SCORE = SCORE + 1 # score increases by 1
            print("CORRECT") #debuging print
        FILE(CORRECT_ANS,LCV, ANSWER) # Log the result. by running file subroutine
        Q_LOOP(question_win, LCV, SCORE, SKIPS) #goes to next question by running Q_loop
        print("SUBMITED") #line for debugging


# RESULTS function calculates the final score and displays a summary screen.
# It uses a message based on the score and provides options to exit or retry.
def RESULTS(SCORE, SKIPS):
    print(SCORE)
    PER_SCORE = (SCORE/10)*100 # Convert score to percentage.
    CALC_RESULTS(PER_SCORE) #runs calc_results
    
    #creates new window using tkinter and configures it to specs
    RESULTS_WIN = Tk()
    RESULTS_WIN.geometry("%dx%d+%d+%d" % (570, 600, 675, 249))
    RESULTS_WIN.overrideredirect(True)
    RESULTS_WIN.resizable(False,False)
    RESULTS_WIN.configure(bg="#e69138")
    RESULTS_WIN.config(cursor="heart")
    #header = Label(RESULTS_WIN, text="Results, bg="ffe599", padx=85.1962865, font=("Merriweather", 20))

    # Displays the score and messages. using label and canvas
    header = Label(RESULTS_WIN, text="Results", bg="#ffe599", font=("Merriweather", 20), padx=97)
    header.place(x=135 ,y=30)
    resultsbox = Canvas(RESULTS_WIN, bg="#ffe599", height=333, width=422)
    resultsbox.place(y=86,x=64)
    DISPLAYSCORE = Label(resultsbox, text="Score: "+str(int(PER_SCORE))+"%", font=("Merriweather, 20"), wraplength=422, bg="#ffe599").place(relx=0.5, y=50, anchor=CENTER)
    print(MSGD)
    MESSAGELABEL = Label(resultsbox, text=MSGD, font=("Merriweather, 20"), wraplength=422, bg="#ffe599").place(relx=0.5, y=150, anchor=CENTER)
    MESSAGELABEL = Label(resultsbox, text="Questions Skipped: "+str(SKIPS), font=("Merriweather, 20"), wraplength=422, bg="#ffe599").place(relx=0.5, y=250, anchor=CENTER)

    #retry and exit buttons using tkitner button
    exitbutton = Button(RESULTS_WIN, text="Exit", command= lambda: QUIT_PRO(PER_SCORE, SCORE, SKIPS, RESULTS_WIN), bg="#660000",fg="white", font=("merriweather", 20), padx=122.6)
    exitbutton.place(relx=0.5,y=470, anchor=CENTER)
    redobutton = Button(RESULTS_WIN, text="Try Again", command= lambda: RESTART(RESULTS_WIN), bg="#660000",fg="white", font=("merriweather", 20), padx=107.6)
    redobutton.place(relx=0.5,y=540, anchor=CENTER)

#writes score into file the opens it. destroys results window
#runs on exit
def QUIT_PRO(PER_SCORE, SCORE, SKIPS, RESULTS_WIN):
    RESULTS_WIN.destroy()
    with open("QUIZ_RESULTS.txt", "a") as file:
        # Writes the the cards details into file, new info on each line, eahc card as blank line in between
        file.write("Score=" + str(SCORE) + "/10" + "\n")
    os.startfile("QUIZ_RESULTS.txt") # Open "cards.txt" in the defult text editor using os.startfile()    
    quit() 

# FILE function writes the answer details to the quiz results file.
def FILE(CORRECT_ANS,LCV, ANSWER):
    with open("QUIZ_RESULTS.txt", "a") as file:
        # Writes the the cards details into file, new info on each line, eahc card as blank line in between
        print(LCV)
        file.write("Question=" + str(QUESTIONS[LCV-1][2]) + "\n")
        file.write("Correct Answer=" + str(CORRECT_ANS) + "\n")
        file.write("Answer chosen=" + str(ANSWER.get()) + "\n\n")

# CALC_RESULTS function assigns feedback messages based on the score percentage.
#using selection case to set correctly
def CALC_RESULTS(PER_SCORE):
    global MSGD
    MSGD = ""
    if PER_SCORE < PER1:
        MSGD = MSG1
    elif PER_SCORE >= PER1 and PER_SCORE < PER2:
        MSGD = MSG2
    elif PER_SCORE >= PER2 and PER_SCORE < PER3:
        MSGD = MSG3
    else:
        MSGD = MSG4

#function allows player to restart by setting loop variable to 1
def RESTART(RESULTS_WIN):
    RESULTS_WIN.destroy() #destroys results window
    global RUN_PRG
    RUN_PRG = 1 #sets RUN_PRG to 1 which is loop control
    SCORE = 0 #resets score

#loop for the code which allows it to be redone
#all important values that change to zero
#resets file
RUN_PRG = 1
while RUN_PRG == 1:
    with open("QUIZ_RESULTS.txt", "w") as file: #opens file and writes to resets
        # Writes the the cards details into file, new info on each line, eahc card as blank line in between
        file.write("")
    RUN_PRG = 0
    print("STARTED")
    LCV = 0
    SCORE = 0
    SKIPS = 0
    global QUESTION_CTRL
    QUESTION_CTRL = 0
    question_win = 1
    MAIN(question_win) #runs main to start program
    print("DONE")
    random.shuffle(QUESTIONS) #reshuffles after program is done.
